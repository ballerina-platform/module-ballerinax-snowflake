/*
 * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv('packageUser')
                password System.getenv('packagePAT')
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - Snowflake Ballerina Connector'

def packageName = 'snowflake'
def packageOrg = 'ballerinax'
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")

def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

dependencies {
    externalJars(group: 'io.ballerina.stdlib', name: 'sql-native', version: "${stdlibSqlVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentSQLVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@sql.version@', stdlibDependentSQLVersion)
        newConfig = newConfig.replace('@sql.native.version@', project.stdlibSqlVersion)
        ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

// task downloadExternalJars {
//     doLast {
//         def configuration = configurations.detachedConfiguration(dependencies.create( "io.ballerina.stdlib:sql-native:${stdlibSqlVersion}"))
//         def libsDir = file('lib')
//         libsDir.mkdirs()
        
//         copy {
//             from configuration.singleFile
//             into libsDir
//         }
//     }
// }


// task build {
//     dependsOn ":${packageName}-native:build"
//     dependsOn updateTomlFiles
//     dependsOn downloadExternalJars
//     doLast {
//         executeBalCommand ("build", "${project.projectDir}")
//         executeBalCommand ("pack", "${project.projectDir}")
//         executeBalCommand ("push --repository=local", "${project.projectDir}")

//         def centralDir = file("${System.getProperty('user.home')}/.ballerina/repositories/central.ballerina.io/")
//         def cacheDirs = centralDir.listFiles().findAll { it.isDirectory() && it.name.startsWith('cache-') }
//         delete cacheDirs

//         def destinationDir = new File("${System.getProperty('user.home')}/.ballerina/repositories/central.ballerina.io/bala/ballerinax/${project.packageName}")
//         if (destinationDir.exists()) {
//             delete destinationDir;
//         }

//         copy {
//             from "${System.getProperty('user.home')}/.ballerina/repositories/local/bala/ballerinax/${project.packageName}"
//             into destinationDir
//         }
//     }
// }

// task test {
//     dependsOn ":${packageName}-native:build"
//     dependsOn updateTomlFiles
//     dependsOn downloadExternalJars
//     doLast {
//         executeBalCommand ("test", "${project.projectDir}")
//     }
// }

updateTomlFiles.dependsOn copyStdlibs
build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"
