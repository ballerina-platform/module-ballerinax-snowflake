/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
 import org.apache.tools.ant.taskdefs.condition.Os
 
apply plugin: 'java'

description = 'Ballerina - Snowflake Examples'

def ballerinaDist = "${project.rootDir}/target/ballerina-runtime"
def examples = ["query-operation", "execute-operation", "batch-operation", "call-stored-procedures"]

clean {
    examples.forEach { example ->
        delete "${projectDir}/${example}/target"
        delete "${projectDir}/${example}/Dependencies.toml"
    }
}


// def filePath = project.fileTree("${project.projectDir}")
// def examples = filePath.matching {
//     include("**/*.bal")
//     exclude("**/deprecated/**/*.bal")
// }

def graalvmFlag = ""

task testExamples {
    if (project.hasProperty('balGraalVMTest')) {
        graalvmFlag = '--graalvm'
    }

    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/${example}"
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat test --offline ${graalvmFlag} && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal test --offline ${graalvmFlag}"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Build failed: " + e.message)
                throw e
            }
        }
    }
}

task buildExamples {
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":java.jdbc-examples:test")) {
            buildExamples.enabled = false
        }
    }
    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/${example}"
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat pack --offline && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal pack --offline"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Build failed: " + e.message)
                throw e
            }
        }
    }
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

// task testExamples {
//     dependsOn ":${project.packageName}-ballerina:build"

//     doLast {
//         examples.each { example ->  executeBalCommand ("run ${example} -- -CaccountIdentifier=identifier -Cuser=user -Cpassword=pass", "${project.rootDir}") }
//     }
// }

// task buildExamples {
//     dependsOn ":${project.packageName}-ballerina:build"
    
//     // TODO: Remove this task once the issue of pulling incorrect versions of the Ballerina modules is fixed.
//     //executeBalCommand ("pull ballerinax/snowflake.driver", "${project.rootDir}")

//     gradle.taskGraph.whenReady { graph ->
//         if (graph.hasTask(":${project.packageName}-examples:test")) {
//             buildExamples.enabled = false
//         } else {
//             testExamples.enabled = false
//         }
//     }
//     doLast {
//         // TODO: Enabled --offline due to a bug in pulling incorrect versions from the central repository.
//         examples.each { example ->  executeBalCommand ("build --offline ${example}", "${project.rootDir}") }
//     }
// }

buildExamples.dependsOn ":snowflake-ballerina:build"
testExamples.dependsOn ":snowflake-ballerina:build"
test.dependsOn testExamples
build.dependsOn buildExamples
